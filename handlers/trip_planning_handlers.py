from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext

from handlers.trip_planning_states import TripPlanning # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–≥–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
trip_planning_router = Router(name="trip_planning_router")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plan_trip
@trip_planning_router.message(Command("plan_trip"))
async def cmd_plan_trip(message: Message, state: FSMContext):
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∞–ª—å–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏. ‚ú®\n\n"
        "<b>–®–∞–≥ 1: –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n"
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å. "
        "–ò–ª–∏, –µ—Å–ª–∏ –≤—ã —É–∂–µ —Ç–∞–º, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–Ω–∞–∂–∞–≤ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –∏ –≤—ã–±—Ä–∞–≤ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è').",
        reply_markup=ReplyKeyboardRemove() # –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—ã—á–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–µ—Å–ª–∏ –±—ã–ª–∏)
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"
    await state.set_state(TripPlanning.waiting_for_location)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_location.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ª–æ–∫–∞—Ü–∏–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)
@trip_planning_router.message(TripPlanning.waiting_for_location, F.text)
async def process_location_text(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –≤ "–ø–∞–º—è—Ç—å" FSM –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(user_location_text=message.text.strip())

    user_data = await state.get_data()
    print(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ª–æ–∫–∞—Ü–∏–∏: {user_data}")

    # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    await message.answer(
        f"–ü—Ä–∏–Ω—è—Ç–æ! –í—ã —É–∫–∞–∑–∞–ª–∏: {message.text}.\n\n"
        "<b>–®–∞–≥ 2: –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã</b> üé®üèûÔ∏èüèõÔ∏èüõçÔ∏è\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –ø–æ–µ–∑–¥–∫–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: "
        "<i>–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ø—Ä–∏—Ä–æ–¥–∞, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, —à–æ–ø–∏–Ω–≥, –∏—Å—Ç–æ—Ä–∏—è, –∏—Å–∫—É—Å—Å—Ç–≤–æ, –Ω–æ—á–Ω–∞—è –∂–∏–∑–Ω—å, —Å–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö</i>."
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"
    await state.set_state(TripPlanning.waiting_for_interests)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_interests.")

# TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (message: ContentType.LOCATION) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_location


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö
@trip_planning_router.message(TripPlanning.waiting_for_interests, F.text)
async def process_interests(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã.
    await state.update_data(user_interests_text=message.text.strip())

    user_data = await state.get_data()
    print(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {user_data}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –±—é–¥–∂–µ—Ç–∞
    budget_buttons = [
        [InlineKeyboardButton(text="üí∞ –≠–∫–æ–Ω–æ–º (Low)", callback_data="budget_low")],
        [InlineKeyboardButton(text="üí∞üí∞ –°—Ä–µ–¥–Ω–∏–π (Mid)", callback_data="budget_mid")],
        [InlineKeyboardButton(text="üí∞üí∞üí∞ –ü—Ä–µ–º–∏—É–º (Premium)", callback_data="budget_premium")]
    ]
    budget_keyboard = InlineKeyboardMarkup(inline_keyboard=budget_buttons)

    # –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –±—é–¥–∂–µ—Ç
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {message.text}.\n\n"
        "<b>–®–∞–≥ 3: –í–∞—à –±—é–¥–∂–µ—Ç</b> üí≥\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –ø–æ–µ–∑–¥–∫—É:",
        reply_markup=budget_keyboard # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –Ω–∞—à—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"
    await state.set_state(TripPlanning.waiting_for_budget)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_budget.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –±—é–¥–∂–µ—Ç–∞
@trip_planning_router.callback_query(TripPlanning.waiting_for_budget, F.data.startswith("budget_"))
async def process_budget_callback(callback_query: CallbackQuery, state: FSMContext):
    selected_budget = callback_query.data.split("_")[1]

    await state.update_data(user_budget=selected_budget)

    user_data = await state.get_data()
    print(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id} –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞: {user_data}")

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    await callback_query.message.edit_text(
        f"–ë—é–¥–∂–µ—Ç –≤—ã–±—Ä–∞–Ω: {selected_budget.capitalize()}.\n\n"
        "<b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –î–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏</b> (—ç—Ç–æ –º—ã –¥–æ–±–∞–≤–∏–º –æ—á–µ–Ω—å —Å–∫–æ—Ä–æ!)\n\n"
        "–°–ø–∞—Å–∏–±–æ! –ù–∞ —ç—Ç–æ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω (–≤—Ä–µ–º–µ–Ω–Ω–æ)."
    )
    await callback_query.answer(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—é–¥–∂–µ—Ç: {selected_budget.capitalize()}", show_alert=False)

    # TODO: –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –¥–∞—Ç—ã –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear() # –ü–æ–∫–∞ —á—Ç–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª (–≤—Ä–µ–º–µ–Ω–Ω–æ) –≤–≤–æ–¥. –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ.")