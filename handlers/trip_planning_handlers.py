import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, \
    ContentType
from aiogram.fsm.context import FSMContext

from handlers.trip_planning_states import TripPlanning
from utils.ai_integration import get_travel_recommendations


# ==============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
# ==============================================================================
async def _format_recommendation_text(recommendation: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –æ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
    """
    rec_type_map = {
        "route": "üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç", "transport_option": "üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "hotel": "üè® –û—Ç–µ–ª—å",
        "museum": "üèõÔ∏è –ú—É–∑–µ–π", "restaurant": "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω", "event": "üéâ –°–æ–±—ã—Ç–∏–µ",
        "activity": "ü§∏ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    }
    rec_type_emoji = rec_type_map.get(recommendation.get("type", "unknown"), "‚≠ê")

    text_parts = [
        f"<b>{rec_type_emoji}: {recommendation.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>"
    ]

    if recommendation.get('address'):
        text_parts.append(f"üìç <b>–ê–¥—Ä–µ—Å:</b> {recommendation.get('address')}")

    if recommendation.get('description'):
        text_parts.append(f"üìù <i>{recommendation.get('description')}</i>")

    details = recommendation.get("details")
    if details and isinstance(details, dict):
        detail_str_parts = []
        if recommendation.get("type") == "route" and details.get("route_type"):
            detail_str_parts.append(f"–¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞: {details['route_type']}")
        if recommendation.get("type") == "route" and details.get("stops"):
            stops_str = ", ".join([s.get('name', '–û—Å—Ç–∞–Ω–æ–≤–∫–∞') for s in details['stops'][:3]])
            if len(details['stops']) > 3:
                stops_str += " –∏ –¥—Ä."
            detail_str_parts.append(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∏: {stops_str}")
        if recommendation.get("type") == "hotel" and details.get("stars"):
            stars_value = details.get('stars')
            if isinstance(stars_value, (int, float)) and stars_value > 0:
                stars_text = '‚≠ê' * int(stars_value)
                detail_str_parts.append(f"{stars_text} ({stars_value} –∑–≤–µ–∑–¥)")
            elif stars_value:
                detail_str_parts.append(f"–ó–≤–µ–∑–¥: {stars_value}")
        if recommendation.get("type") == "hotel" and details.get("amenities"):
            amenities_str = ", ".join(details['amenities'][:3])
            if len(details['amenities']) > 3:
                amenities_str += " –∏ –¥—Ä."
            detail_str_parts.append(f"–£–¥–æ–±—Å—Ç–≤–∞: {amenities_str}")
        if recommendation.get("type") == "restaurant" and details.get("cuisine_type"):
            cuisine_str = ", ".join(details['cuisine_type']) if isinstance(details['cuisine_type'], list) else details[
                'cuisine_type']
            detail_str_parts.append(f"–ö—É—Ö–Ω—è: {cuisine_str}")
        if recommendation.get("type") == "restaurant" and details.get("average_bill"):
            detail_str_parts.append(f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {details['average_bill']}")
        if recommendation.get("type") == "event" and details.get("event_dates"):
            dates_str = " - ".join(details['event_dates']) if isinstance(details['event_dates'], list) else details[
                'event_dates']
            detail_str_parts.append(f"–î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {dates_str}")

        if detail_str_parts:
            text_parts.append("\n<b>–î–µ—Ç–∞–ª–∏:</b>\n" + "\n".join([f"  - {d}" for d in detail_str_parts]))

    if recommendation.get('distance_or_time'):
        text_parts.append(f"üöó/üö∂ <b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ/–í—Ä–µ–º—è:</b> {recommendation.get('distance_or_time')}")
    if recommendation.get('price_estimate'):
        price_est = recommendation.get('price_estimate')
        if price_est and str(price_est).lower() != "null":
            text_parts.append(f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_est}")
    if recommendation.get('rating'):
        text_parts.append(f"üåü <b>–†–µ–π—Ç–∏–Ω–≥:</b> {recommendation.get('rating')}/5")
    if recommendation.get('opening_hours'):
        oh = recommendation.get('opening_hours')
        if oh and str(oh).lower() != "null":
            text_parts.append(f"‚è∞ <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> {oh}")

    return "\n\n".join(text_parts)


# ==============================================================================
# –û–°–ù–û–í–ù–û–ô –†–û–£–¢–ï–† –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ü–û–ï–ó–î–ö–ò
# ==============================================================================
trip_planning_router = Router(name="trip_planning_router")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plan_trip
@trip_planning_router.message(Command("plan_trip"))
async def cmd_plan_trip(message: Message, state: FSMContext):
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∞–ª—å–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏. ‚ú®\n\n"
        "<b>–®–∞–≥ 1: –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n"
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å. "
        "–ò–ª–∏, –µ—Å–ª–∏ –≤—ã —É–∂–µ —Ç–∞–º, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–Ω–∞–∂–∞–≤ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –∏ –≤—ã–±—Ä–∞–≤ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è').",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(TripPlanning.waiting_for_location)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_location.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ª–æ–∫–∞—Ü–∏–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)
@trip_planning_router.message(TripPlanning.waiting_for_location, F.text)
async def process_location_text(message: Message, state: FSMContext):
    logging.info(f"–°–†–ê–ë–û–¢–ê–õ process_location_text –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await state.update_data(user_location_text=message.text.strip())
    await state.update_data(user_location_geo=None)
    user_data = await state.get_data()
    logging.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏: {user_data}")
    await _ask_for_interests(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@trip_planning_router.message(TripPlanning.waiting_for_location, F.content_type == ContentType.LOCATION)
async def process_location_geo(message: Message, state: FSMContext):
    logging.info(f"–°–†–ê–ë–û–¢–ê–õ process_location_geo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    user_latitude = message.location.latitude
    user_longitude = message.location.longitude

    await state.update_data(user_location_geo=[user_latitude, user_longitude])
    await state.update_data(user_location_text=None)

    user_data = await state.get_data()
    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: [{user_latitude}, {user_longitude}]. –î–∞–Ω–Ω—ã–µ state: {user_data}")

    await message.answer(
        f"üåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: –®–∏—Ä–æ—Ç–∞ {user_latitude:.4f}, –î–æ–ª–≥–æ—Ç–∞ {user_longitude:.4f}.\n"
        "–û—Ç–ª–∏—á–Ω–æ!"
    )
    await _ask_for_interests(message, state)


async def _ask_for_interests(message: Message, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö."""
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å —è–∑—ã–∫
    lang = user_data.get("user_language", "ru")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π

    # TODO: –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å BOT_MESSAGES –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —ç—Ç–æ–≥–æ —à–∞–≥–∞
    prompt_text = (
        "<b>–®–∞–≥ 2: –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã</b> üé®üèûÔ∏èüèõÔ∏èüõçÔ∏è\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –ø–æ–µ–∑–¥–∫–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: "
        "<i>–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ø—Ä–∏—Ä–æ–¥–∞, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, —à–æ–ø–∏–Ω–≥, –∏—Å—Ç–æ—Ä–∏—è, –∏—Å–∫—É—Å—Å—Ç–≤–æ, –Ω–æ—á–Ω–∞—è –∂–∏–∑–Ω—å, —Å–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö</i>."
    )
    if lang == "en":
        prompt_text = (
            "<b>Step 2: Your Interests</b> üé®üèûÔ∏èüèõÔ∏èüõçÔ∏è\n"
            "Please list your interests, separated by commas. For example: "
            "<i>architecture, nature, gastronomy, shopping, history, art, nightlife, family vacation</i>."
        )
    elif lang == "fr":
        prompt_text = (
            "<b>√âtape 2 : Vos centres d'int√©r√™t</b> üé®üèûÔ∏èüèõÔ∏èüõçÔ∏è\n"
            "Veuillez √©num√©rer vos centres d'int√©r√™t, s√©par√©s par des virgules. Par exemple: "
            "<i>architecture, nature, gastronomie, shopping, histoire, art, vie nocturne, vacances en famille</i>."
        )

    await message.answer(prompt_text)
    await state.set_state(TripPlanning.waiting_for_interests)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_interests.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö
@trip_planning_router.message(TripPlanning.waiting_for_interests, F.text)
async def process_interests(message: Message, state: FSMContext):
    await state.update_data(user_interests_text=message.text.strip())
    user_data = await state.get_data()
    logging.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {user_data}")

    lang = user_data.get("user_language", "ru")

    # TODO: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    button_text_low = "üí∞ –≠–∫–æ–Ω–æ–º (Low)"
    button_text_mid = "üí∞üí∞ –°—Ä–µ–¥–Ω–∏–π (Mid)"
    button_text_premium = "üí∞üí∞üí∞ –ü—Ä–µ–º–∏—É–º (Premium)"
    prompt_text_budget = "<b>–®–∞–≥ 3: –í–∞—à –±—é–¥–∂–µ—Ç</b> üí≥\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –ø–æ–µ–∑–¥–∫—É:"

    if lang == "en":
        button_text_low = "üí∞ Economy (Low)"
        button_text_mid = "üí∞üí∞ Standard (Mid)"
        button_text_premium = "üí∞üí∞üí∞ Premium"
        prompt_text_budget = "<b>Step 3: Your Budget</b> üí≥\nPlease select your estimated spending level for the trip:"
    elif lang == "fr":
        button_text_low = "üí∞ √âconomique (Low)"
        button_text_mid = "üí∞üí∞ Moyen (Mid)"
        button_text_premium = "üí∞üí∞üí∞ Premium"
        prompt_text_budget = "<b>√âtape 3 : Votre Budget</b> üí≥\nVeuillez s√©lectionner votre niveau de d√©penses estim√© pour le voyage :"

    budget_buttons = [
        [InlineKeyboardButton(text=button_text_low, callback_data="budget_low")],
        [InlineKeyboardButton(text=button_text_mid, callback_data="budget_mid")],
        [InlineKeyboardButton(text=button_text_premium, callback_data="budget_premium")]
    ]
    budget_keyboard = InlineKeyboardMarkup(inline_keyboard=budget_buttons)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å
    interests_accepted_text = f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {message.text}.\n\n"
    if lang == "en":
        interests_accepted_text = f"Great! Your interests: {message.text}.\n\n"
    elif lang == "fr":
        interests_accepted_text = f"Parfait ! Vos centres d'int√©r√™t : {message.text}.\n\n"

    await message.answer(
        interests_accepted_text + prompt_text_budget,
        reply_markup=budget_keyboard
    )
    await state.set_state(TripPlanning.waiting_for_budget)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_budget.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –±—é–¥–∂–µ—Ç–∞
@trip_planning_router.callback_query(TripPlanning.waiting_for_budget, F.data.startswith("budget_"))
async def process_budget_callback(callback_query: CallbackQuery, state: FSMContext):
    selected_budget_code = callback_query.data.split("_")[1]
    await state.update_data(user_budget=selected_budget_code)

    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å —è–∑—ã–∫
    lang = user_data.get("user_language", "ru")
    logging.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id} –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞: {user_data}")

    # TODO: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
    budget_selected_text = f"–ë—é–¥–∂–µ—Ç –≤—ã–±—Ä–∞–Ω: {selected_budget_code.capitalize()}"
    prompt_dates_text = (
        "<b>–®–∞–≥ 4: –î–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏</b> üìÖ\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>2025-05-10 to 2025-05-12</i> –∏–ª–∏ <i>—Å 10 –ø–æ 12 –º–∞—è 2025</i>.\n"
        "–ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö –¥–∞—Ç –Ω–µ—Ç, –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, <i>–Ω–µ–¥–µ–ª—è –≤ –∏—é–ª–µ</i> –∏–ª–∏ <i>3 –¥–Ω—è</i>."
    )
    if lang == "en":
        budget_selected_text = f"Budget selected: {selected_budget_code.capitalize()}"
        prompt_dates_text = (
            "<b>Step 4: Trip Dates</b> üìÖ\n"
            "Please enter the start and end dates of your trip.\n"
            "For example: <i>2025-05-10 to 2025-05-12</i> or <i>from May 10 to 12, 2025</i>.\n"
            "If you don't have exact dates, you can specify an approximate duration, e.g., <i>a week in July</i> or <i>3 days</i>."
        )
    elif lang == "fr":
        budget_selected_text = f"Budget s√©lectionn√© : {selected_budget_code.capitalize()}"
        prompt_dates_text = (
            "<b>√âtape 4 : Dates du voyage</b> üìÖ\n"
            "Veuillez indiquer les dates de d√©but et de fin de votre voyage.\n"
            "Par exemple : <i>2025-05-10 to 2025-05-12</i> ou <i>du 10 au 12 mai 2025</i>.\n"
            "Si vous n'avez pas de dates exactes, vous pouvez sp√©cifier une dur√©e approximative, par exemple, <i>une semaine en juillet</i> ou <i>3 jours</i>."
        )

    await callback_query.message.edit_text(f"{budget_selected_text}.\n\n{prompt_dates_text}")
    await callback_query.answer(text=budget_selected_text, show_alert=False)
    await state.set_state(TripPlanning.waiting_for_trip_dates)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_trip_dates.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–∞—Ç–∞—Ö –ø–æ–µ–∑–¥–∫–∏
@trip_planning_router.message(TripPlanning.waiting_for_trip_dates, F.text)
async def process_trip_dates(message: Message, state: FSMContext):
    await state.update_data(user_trip_dates_text=message.text.strip())
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å —è–∑—ã–∫
    lang = user_data.get("user_language", "ru")
    logging.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞—Ç: {user_data}")

    # TODO: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
    dates_accepted_text = f"–î–∞—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã: {message.text}.\n\n"
    prompt_transport_text = (
        "<b>–®–∞–≥ 5: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É</b> üö∂üöóüöåüö≤\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–∞–∫–∏–µ –≤–∏–¥—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø–æ–µ–∑–¥–∫–µ. "
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ø–µ—à–∫–æ–º, –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –≤–µ–ª–æ—Å–∏–ø–µ–¥, —Ç–∞–∫—Å–∏</i>."
    )
    if lang == "en":
        dates_accepted_text = f"Dates accepted: {message.text}.\n\n"
        prompt_transport_text = (
            "<b>Step 5: Transport Preferences</b> üö∂üöóüöåüö≤\n"
            "Please list your preferred modes of transport, separated by commas. "
            "For example: <i>walking, car, public transport, bicycle, taxi</i>."
        )
    elif lang == "fr":
        dates_accepted_text = f"Dates accept√©es : {message.text}.\n\n"
        prompt_transport_text = (
            "<b>√âtape 5 : Pr√©f√©rences de transport</b> üö∂üöóüöåüö≤\n"
            "Veuillez indiquer vos modes de transport pr√©f√©r√©s, s√©par√©s par des virgules. "
            "Par exemple : <i>marche, voiture, transports en commun, v√©lo, taxi</i>."
        )

    await message.answer(dates_accepted_text + prompt_transport_text)
    await state.set_state(TripPlanning.waiting_for_transport_prefs)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_transport_prefs.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
@trip_planning_router.message(TripPlanning.waiting_for_transport_prefs, F.text)
async def process_transport_prefs(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(user_transport_prefs_text=message.text.strip())
    final_user_data = await state.get_data()
    lang = final_user_data.get("user_language", "ru")
    logging.info(f"–í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {final_user_data}")

    # TODO: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
    transport_accepted_text = f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø—Ä–∏–Ω—è—Ç—ã: {message.text}.\n\n"
    generating_text = "üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å—é –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!</b>\n–ü–æ–¥–±–∏—Ä–∞—é –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚ú®"

    if lang == "en":
        transport_accepted_text = f"Transport preferences accepted: {message.text}.\n\n"
        generating_text = "üéâ <b>Great! You've provided all the basic information!</b>\nFinding the best options for you... This might take a few seconds ‚ú®"
    elif lang == "fr":
        transport_accepted_text = f"Pr√©f√©rences de transport accept√©es : {message.text}.\n\n"
        generating_text = "üéâ <b>Parfait ! Vous avez fourni toutes les informations de base !</b>\nRecherche des meilleures options pour vous... Cela –º–æ–∂–µ—Ç prendre quelques secondes ‚ú®"

    await message.answer(transport_accepted_text + generating_text)
    await state.clear()

    recommendations_json, accompanying_text = await get_travel_recommendations(final_user_data)

    if recommendations_json and accompanying_text:
        # –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ –æ—Ç Gemini
        await message.answer(accompanying_text)

        if "recommendations" in recommendations_json:
            for rec in recommendations_json["recommendations"]:
                # –¢–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ –æ—Ç Gemini
                formatted_text = await _format_recommendation_text(rec)  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –æ—Å—Ç–∞–µ—Ç—Å—è

                buttons = []
                booking_url = rec.get('booking_link')
                button_book_text = "üîó –ë—Ä–æ–Ω—å/–ë–∏–ª–µ—Ç—ã"
                button_map_text = "üó∫Ô∏è –ù–∞ –∫–∞—Ä—Ç–µ"
                if lang == "en":
                    button_book_text = "üîó Book/Tickets"
                    button_map_text = "üó∫Ô∏è On Map"
                elif lang == "fr":
                    button_book_text = "üîó R√©server/Billets"
                    button_map_text = "üó∫Ô∏è Sur la carte"

                if booking_url and isinstance(booking_url,
                                              str) and booking_url.strip().lower() != "null" and booking_url.strip() != "":
                    buttons.append(InlineKeyboardButton(text=button_book_text, url=booking_url))

                coords = rec.get('coordinates')
                if coords and isinstance(coords, list) and len(coords) == 2:
                    try:
                        lat, lon = float(coords[0]), float(coords[1])
                        maps_url = f"https://www.google.com/maps/search/?api=1&query={lat},{lon}"
                        buttons.append(InlineKeyboardButton(text=button_map_text, url=maps_url))
                    except (ValueError, TypeError):
                        logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞ –∫–∞—Ä—Ç–µ': {coords}")

                reply_markup = InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None

                images = rec.get("images", [])
                photo_sent = False
                if images and isinstance(images, list) and images[0] and isinstance(images[0], str):
                    try:
                        await bot.send_photo(
                            chat_id=message.chat.id,
                            photo=images[0],
                            caption=formatted_text,
                            # –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ –æ—Ç Gemini
                            reply_markup=reply_markup,
                            parse_mode="HTML"
                        )
                        photo_sent = True
                    except Exception as e:
                        logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {images[0]}: {e}. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")

                if not photo_sent:
                    await message.answer(formatted_text, reply_markup=reply_markup, parse_mode="HTML")
        else:
            # TODO: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            no_recs_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –æ—Ç AI –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∞ 'recommendations'."
            if lang == "en":
                no_recs_text = "Unfortunately, the AI response does not contain a 'recommendations' section."
            elif lang == "fr":
                no_recs_text = "Malheureusement, la r√©ponse de l'IA ne contient pas de section 'recommendations'."
            await message.answer(no_recs_text)
    else:
        error_text_to_send = accompanying_text or "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        # TODO: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å accompanying_text –∏–ª–∏ —ç—Ç–æ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if lang == "en" and not accompanying_text:
            error_text_to_send = "Sorry, couldn't get recommendations from AI. Please try again later."
        elif lang == "fr" and not accompanying_text:
            error_text_to_send = "D√©sol√©, impossible d'obtenir des recommandations de l'IA. Veuillez r√©essayer plus tard."
        await message.answer(error_text_to_send)

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç AI. FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ.")