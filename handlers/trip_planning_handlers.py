import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, \
    ContentType
from aiogram.fsm.context import FSMContext

from handlers.trip_planning_states import TripPlanning
from utils.ai_integration import get_travel_recommendations
from utils.localization import get_text  # <--- –ò–ú–ü–û–†–¢–ò–†–£–ï–ú get_text


# ==============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
# ==============================================================================
async def _format_recommendation_text(recommendation: dict,
                                      lang: str = "ru") -> str:  # –î–æ–±–∞–≤–∏–ª lang –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –±—É–¥—É—â–∏—Ö –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π –∑–¥–µ—Å—å
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –æ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
    –¢–µ–∫—Å—Ç—ã –∏–∑ recommendation –£–ñ–ï –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ –æ—Ç AI.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
    """
    rec_type_map_general = {"route": "üó∫Ô∏è", "transport_option": "üöå", "hotel": "üè®", "museum": "üèõÔ∏è", "restaurant": "üçΩÔ∏è",
                            "event": "üéâ", "activity": "ü§∏"}
    rec_type_default_name_key = {
        "route": "rec_type_route_default", "hotel": "rec_type_hotel_default",
        "museum": "rec_type_museum_default", "restaurant": "rec_type_restaurant_default",
        # –î–æ–±–∞–≤—å –∫–ª—é—á–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã –≤ get_text
    }

    rec_type = recommendation.get("type", "unknown")
    type_name_key = rec_type_default_name_key.get(rec_type, f"rec_type_{rec_type}_default")  # –∫–ª—é—á –¥–ª—è get_text

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º —Ç–∏–ø
    # –î–ª—è —ç—Ç–æ–≥–æ –≤ localization.py –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–ª—é—á–∏ —Ç–∏–ø–∞ rec_type_route_default_ru, rec_type_route_default_en –∏ —Ç.–¥.
    # –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —ç–º–æ–¥–∑–∏ + –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ recommendation, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–æ AI
    rec_type_display = f"{rec_type_map_general.get(rec_type, '‚≠ê')} {recommendation.get('type_name_localized_by_ai', rec_type.capitalize())}"
    # ^ AI –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –≤ –ø–æ–ª–µ type_name_localized_by_ai, –µ—Å–ª–∏ –º—ã —ç—Ç–æ–≥–æ —Ö–æ—Ç–∏–º,
    # –Ω–æ –ø—Ä–æ—â–µ, –µ—Å–ª–∏ AI —Å–∞–º –ª–æ–∫–∞–ª–∏–∑—É–µ—Ç –ø–æ–ª–µ "name" —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∞ —Ç–∏–ø –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å.
    # –û—Å—Ç–∞–≤–∏–º –∫–∞–∫ –±—ã–ª–æ: —ç–º–æ–¥–∑–∏ + name (–∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –æ—Ç AI –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ)

    text_parts = [
        f"<b>{rec_type_map_general.get(rec_type, '‚≠ê')}: {recommendation.get('name', get_text('text_no_name', lang))}</b>"
    ]

    if recommendation.get('address') and str(recommendation.get('address')).lower() != "null":
        text_parts.append(f"üìç <b>{get_text('text_address', lang)}:</b> {recommendation.get('address')}")

    if recommendation.get('description'):
        text_parts.append(f"üìù <i>{recommendation.get('description')}</i>")

    details = recommendation.get("details")
    if details and isinstance(details, dict):
        detail_str_parts = []
        # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è details, –æ–Ω–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç AI) ...
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ AI –≤–µ—Ä–Ω—É–ª "cuisine_type": ["–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "–ü–∏—Ü—Ü–∞"] –Ω–∞ —Ä—É—Å—Å–∫–æ–º,
        # —Ç–æ —Ç–∞–∫ –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è. –ï—Å–ª–∏ –Ω–∞ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º, —Ç–æ —Ç–æ–∂–µ.
        # –ó–¥–µ—Å—å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∏–ø–∞ "–¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞:", "–£–¥–æ–±—Å—Ç–≤–∞:"
        if recommendation.get("type") == "route" and details.get("route_type"):
            detail_str_parts.append(f"{get_text('detail_route_type', lang)}: {details['route_type']}")
        if recommendation.get("type") == "route" and details.get("stops"):
            stops_str = ", ".join([s.get('name', get_text('text_stop', lang)) for s in details['stops'][:3]])
            if len(details['stops']) > 3:
                stops_str += f" {get_text('text_and_more', lang)}"
            detail_str_parts.append(f"{get_text('detail_stops', lang)}: {stops_str}")
        # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ—Ç–∞–ª–µ–π ...

        if detail_str_parts:
            text_parts.append(f"\n<b>{get_text('text_details_header', lang)}:</b>\n" + "\n".join(
                [f"  - {d}" for d in detail_str_parts]))

    if recommendation.get('distance_or_time') and str(recommendation.get('distance_or_time')).lower() != "null":
        text_parts.append(
            f"üöó/üö∂ <b>{get_text('text_distance_time', lang)}:</b> {recommendation.get('distance_or_time')}")

    price_est = recommendation.get('price_estimate')
    if price_est and str(price_est).lower() != "null":
        text_parts.append(f"üí∞ <b>{get_text('text_price', lang)}:</b> {price_est}")

    rating_val = recommendation.get('rating')
    if rating_val and str(rating_val).lower() != "null":
        try:  # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ float, –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
            rating_float = float(rating_val)
            text_parts.append(f"üåü <b>{get_text('text_rating', lang)}:</b> {rating_float:.1f}/5")
        except ValueError:  # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
            text_parts.append(f"üåü <b>{get_text('text_rating', lang)}:</b> {rating_val}")

    oh = recommendation.get('opening_hours')
    if oh and str(oh).lower() != "null":
        text_parts.append(f"‚è∞ <b>{get_text('text_opening_hours', lang)}:</b> {oh}")

    return "\n\n".join(text_parts)


# ==============================================================================
# –û–°–ù–û–í–ù–û–ô –†–û–£–¢–ï–† –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ü–û–ï–ó–î–ö–ò
# ==============================================================================
trip_planning_router = Router(name="trip_planning_router")


async def get_user_language(state: FSMContext, default_lang: str = "ru") -> str:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    user_data = await state.get_data()
    return user_data.get("user_language", default_lang)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plan_trip
@trip_planning_router.message(Command("plan_trip"))
async def cmd_plan_trip(message: Message, state: FSMContext):
    lang = await get_user_language(state)

    await message.answer(
        get_text("start_planning_prompt", lang) + "\n\n" +
        get_text("step1_location_prompt", lang),
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(TripPlanning.waiting_for_location)
    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ({lang}). –ü–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_location.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ª–æ–∫–∞—Ü–∏–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)
@trip_planning_router.message(TripPlanning.waiting_for_location, F.text)
async def process_location_text(message: Message, state: FSMContext):
    lang = await get_user_language(state)
    logging.info(f"–°–†–ê–ë–û–¢–ê–õ process_location_text –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({lang})")

    await state.update_data(user_location_text=message.text.strip(), user_location_geo=None)
    user_data = await state.get_data()  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logging.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({lang}) –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏: {user_data}")

    await message.answer(get_text("location_received_text", lang, location_text=message.text))
    await _ask_for_interests(message, state, lang)  # –ü–µ—Ä–µ–¥–∞–µ–º lang


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@trip_planning_router.message(TripPlanning.waiting_for_location, F.content_type == ContentType.LOCATION)
async def process_location_geo(message: Message, state: FSMContext):
    lang = await get_user_language(state)
    logging.info(f"–°–†–ê–ë–û–¢–ê–õ process_location_geo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({lang})")

    user_latitude = message.location.latitude
    user_longitude = message.location.longitude

    await state.update_data(user_location_geo=[user_latitude, user_longitude], user_location_text=None)
    user_data = await state.get_data()  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({lang}) –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: [{user_latitude}, {user_longitude}]. –î–∞–Ω–Ω—ã–µ state: {user_data}")

    await message.answer(
        get_text("location_geo_received_text", lang, latitude=user_latitude, longitude=user_longitude)
    )
    await _ask_for_interests(message, state, lang)  # –ü–µ—Ä–µ–¥–∞–µ–º lang


async def _ask_for_interests(message: Message, state: FSMContext, lang: str):  # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç lang
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö."""
    await message.answer(get_text("step2_interests_prompt", lang))
    await state.set_state(TripPlanning.waiting_for_interests)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({lang}) –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_interests.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö
@trip_planning_router.message(TripPlanning.waiting_for_interests, F.text)
async def process_interests(message: Message, state: FSMContext):
    lang = await get_user_language(state)
    await state.update_data(user_interests_text=message.text.strip())
    user_data = await state.get_data()
    logging.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({lang}) –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {user_data}")

    budget_buttons = [
        [InlineKeyboardButton(text=get_text("budget_option_low", lang), callback_data="budget_low")],
        [InlineKeyboardButton(text=get_text("budget_option_mid", lang), callback_data="budget_mid")],
        [InlineKeyboardButton(text=get_text("budget_option_premium", lang), callback_data="budget_premium")]
    ]
    budget_keyboard = InlineKeyboardMarkup(inline_keyboard=budget_buttons)

    await message.answer(
        get_text("interests_received_text", lang, interests_text=message.text) + "\n\n" +
        get_text("step3_budget_prompt", lang),
        reply_markup=budget_keyboard
    )
    await state.set_state(TripPlanning.waiting_for_budget)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({lang}) –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_budget.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –±—é–¥–∂–µ—Ç–∞
@trip_planning_router.callback_query(TripPlanning.waiting_for_budget, F.data.startswith("budget_"))
async def process_budget_callback(callback_query: CallbackQuery, state: FSMContext):
    lang = await get_user_language(state)
    selected_budget_code = callback_query.data.split("_")[1]
    await state.update_data(user_budget=selected_budget_code)

    user_data = await state.get_data()
    logging.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id} ({lang}) –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞: {user_data}")

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    budget_display_name = ""
    if selected_budget_code == "low":
        budget_display_name = get_text("budget_option_low", lang)
    elif selected_budget_code == "mid":
        budget_display_name = get_text("budget_option_mid", lang)
    elif selected_budget_code == "premium":
        budget_display_name = get_text("budget_option_premium", lang)

    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ budget_display_name, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å, –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    budget_display_name_cleaned = budget_display_name.split(" ", 1)[
        -1] if " " in budget_display_name else budget_display_name

    await callback_query.message.edit_text(
        get_text("budget_selected_text", lang, selected_budget=budget_display_name_cleaned) + "\n\n" +
        get_text("step4_dates_prompt", lang)
    )
    await callback_query.answer(
        text=get_text("budget_selected_text", lang, selected_budget=budget_display_name_cleaned), show_alert=False)
    await state.set_state(TripPlanning.waiting_for_trip_dates)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} ({lang}) –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_trip_dates.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–∞—Ç–∞—Ö –ø–æ–µ–∑–¥–∫–∏
@trip_planning_router.message(TripPlanning.waiting_for_trip_dates, F.text)
async def process_trip_dates(message: Message, state: FSMContext):
    lang = await get_user_language(state)
    await state.update_data(user_trip_dates_text=message.text.strip())
    user_data = await state.get_data()
    logging.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({lang}) –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞—Ç: {user_data}")

    await message.answer(
        get_text("dates_received_text", lang, dates_text=message.text) + "\n\n" +
        get_text("step5_transport_prompt", lang)
    )
    await state.set_state(TripPlanning.waiting_for_transport_prefs)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({lang}) –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_transport_prefs.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
@trip_planning_router.message(TripPlanning.waiting_for_transport_prefs, F.text)
async def process_transport_prefs(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(user_transport_prefs_text=message.text.strip())
    final_user_data = await state.get_data()
    lang = final_user_data.get("user_language", "ru")  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logging.info(f"–í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} ({lang}): {final_user_data}")

    await message.answer(
        get_text("transport_received_text", lang, transport_text=message.text) + "\n\n" +
        get_text("all_data_collected_prompt", lang)
    )
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö

    recommendations_json, accompanying_text = await get_travel_recommendations(final_user_data)

    if recommendations_json and accompanying_text:
        # –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ –æ—Ç Gemini
        await message.answer(accompanying_text)

        if "recommendations" in recommendations_json and isinstance(recommendations_json["recommendations"], list):
            for rec in recommendations_json["recommendations"]:
                if not isinstance(rec, dict):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç - —Å–ª–æ–≤–∞—Ä—å
                    logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ recommendations: {rec}")
                    continue

                # –ü–µ—Ä–µ–¥–∞–µ–º —è–∑—ã–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                formatted_text = await _format_recommendation_text(rec, lang)

                buttons = []
                button_book_text = get_text("button_book_tickets", lang)
                button_map_text = get_text("button_on_map", lang)

                booking_url = rec.get('booking_link')
                if booking_url and isinstance(booking_url,
                                              str) and booking_url.strip().lower() != "null" and booking_url.strip() != "":
                    buttons.append(InlineKeyboardButton(text=button_book_text, url=booking_url))

                coords = rec.get('coordinates')
                if coords and isinstance(coords, list) and len(coords) == 2:
                    try:
                        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - —á–∏—Å–ª–∞
                        lat, lon = float(coords[0]), float(coords[1])
                        maps_url = f"https://www.google.com/maps/search/?api=1&query={lat},{lon}"
                        buttons.append(InlineKeyboardButton(text=button_map_text, url=maps_url))
                    except (ValueError, TypeError):
                        logging.warning(
                            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞ –∫–∞—Ä—Ç–µ': {coords} –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {rec.get('id')}")

                reply_markup = InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None

                images = rec.get("images", [])
                photo_sent = False
                if images and isinstance(images, list) and images and isinstance(images[0], str) and images[
                    0].strip().lower() != "null" and images[0].strip() != "":
                    try:
                        await bot.send_photo(
                            chat_id=message.chat.id,
                            photo=images[0],
                            caption=formatted_text,
                            reply_markup=reply_markup,
                            parse_mode="HTML"
                        )
                        photo_sent = True
                    except Exception as e:
                        logging.warning(
                            f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {images[0]} –¥–ª—è rec_id {rec.get('id')}: {e}. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")

                if not photo_sent:
                    await message.answer(formatted_text, reply_markup=reply_markup, parse_mode="HTML")
        else:
            await message.answer(get_text("no_recommendations_in_response_text", lang))
    else:
        # accompanying_text –∑–¥–µ—Å—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç get_travel_recommendations
        error_key = "ai_response_error_text"  # –ö–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        error_details = ""
        if accompanying_text:
            if " –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON" in accompanying_text:
                error_key = "ai_json_decode_error_text"
                try:  # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                    error_details = accompanying_text.split("(–û—à–∏–±–∫–∞: ", 1)[1].rstrip(")")
                except IndexError:
                    error_details = "–¥–µ—Ç–∞–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã"
            elif "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞" in accompanying_text:
                error_key = "ai_unexpected_error_text"
                try:
                    error_details = accompanying_text.split(": ", 1)[1].rstrip(".")
                except IndexError:
                    error_details = "–¥–µ—Ç–∞–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã"
            elif "–Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ" in accompanying_text:  # "AI –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"
                error_key = "ai_unexpected_format_text"

        await message.answer(get_text(error_key, lang, error_details=error_details, error_type=error_details))

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ({lang}) –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç AI. FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ.")