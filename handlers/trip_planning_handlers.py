from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext

from handlers.trip_planning_states import TripPlanning  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
from utils.ai_integration import get_travel_recommendations


# ==============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
# ==============================================================================
async def _format_recommendation_text(recommendation: dict) -> str:  # –û—Å—Ç–∞–≤–∏–º async –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –æ–¥–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
    """
    rec_type_map = {
        "route": "üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç", "transport_option": "üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "hotel": "üè® –û—Ç–µ–ª—å",
        "museum": "üèõÔ∏è –ú—É–∑–µ–π", "restaurant": "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω", "event": "üéâ –°–æ–±—ã—Ç–∏–µ",
        "activity": "ü§∏ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    }
    rec_type_emoji = rec_type_map.get(recommendation.get("type", "unknown"), "‚≠ê")

    text_parts = [
        f"<b>{rec_type_emoji}: {recommendation.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>"
    ]

    if recommendation.get('address'):
        text_parts.append(f"üìç <b>–ê–¥—Ä–µ—Å:</b> {recommendation.get('address')}")

    if recommendation.get('description'):
        text_parts.append(f"üìù <i>{recommendation.get('description')}</i>")

    details = recommendation.get("details")
    if details and isinstance(details, dict):
        detail_str_parts = []
        if recommendation.get("type") == "route" and details.get("route_type"):
            detail_str_parts.append(f"–¢–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞: {details['route_type']}")
        if recommendation.get("type") == "route" and details.get("stops"):
            stops_str = ", ".join([s.get('name', '–û—Å—Ç–∞–Ω–æ–≤–∫–∞') for s in details['stops'][:3]])
            if len(details['stops']) > 3:
                stops_str += " –∏ –¥—Ä."
            detail_str_parts.append(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∏: {stops_str}")
        if recommendation.get("type") == "hotel" and details.get("stars"):
            stars_text = '‚≠ê' * int(details['stars']) if isinstance(details.get('stars'), (int, float)) and details[
                'stars'] > 0 else str(details['stars'])
            detail_str_parts.append(f"{stars_text} ({details['stars']} –∑–≤–µ–∑–¥)")
        if recommendation.get("type") == "hotel" and details.get("amenities"):
            amenities_str = ", ".join(details['amenities'][:3])
            if len(details['amenities']) > 3:
                amenities_str += " –∏ –¥—Ä."
            detail_str_parts.append(f"–£–¥–æ–±—Å—Ç–≤–∞: {amenities_str}")
        if recommendation.get("type") == "restaurant" and details.get("cuisine_type"):
            cuisine_str = ", ".join(details['cuisine_type']) if isinstance(details['cuisine_type'], list) else details[
                'cuisine_type']
            detail_str_parts.append(f"–ö—É—Ö–Ω—è: {cuisine_str}")
        if recommendation.get("type") == "restaurant" and details.get("average_bill"):
            detail_str_parts.append(f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {details['average_bill']}")
        if recommendation.get("type") == "event" and details.get("event_dates"):
            dates_str = " - ".join(details['event_dates']) if isinstance(details['event_dates'], list) else details[
                'event_dates']
            detail_str_parts.append(f"–î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {dates_str}")

        if detail_str_parts:
            text_parts.append("\n<b>–î–µ—Ç–∞–ª–∏:</b>\n" + "\n".join([f"  - {d}" for d in detail_str_parts]))

    if recommendation.get('distance_or_time'):
        text_parts.append(f"üöó/üö∂ <b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ/–í—Ä–µ–º—è:</b> {recommendation.get('distance_or_time')}")
    if recommendation.get('price_estimate'):
        text_parts.append(f"üí∞ <b>–¶–µ–Ω–∞:</b> {recommendation.get('price_estimate')}")
    if recommendation.get('rating'):
        text_parts.append(f"üåü <b>–†–µ–π—Ç–∏–Ω–≥:</b> {recommendation.get('rating')}/5")
    if recommendation.get('opening_hours'):
        text_parts.append(f"‚è∞ <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> {recommendation.get('opening_hours')}")

    return "\n\n".join(text_parts)


# ==============================================================================
# –û–°–ù–û–í–ù–û–ô –†–û–£–¢–ï–† –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ü–û–ï–ó–î–ö–ò
# ==============================================================================
trip_planning_router = Router(name="trip_planning_router")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plan_trip
@trip_planning_router.message(Command("plan_trip"))
async def cmd_plan_trip(message: Message, state: FSMContext):
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∞–ª—å–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏. ‚ú®\n\n"
        "<b>–®–∞–≥ 1: –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n"
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å. "
        "–ò–ª–∏, –µ—Å–ª–∏ –≤—ã —É–∂–µ —Ç–∞–º, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–Ω–∞–∂–∞–≤ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé –∏ –≤—ã–±—Ä–∞–≤ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è').",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(TripPlanning.waiting_for_location)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_location.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ª–æ–∫–∞—Ü–∏–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥)
@trip_planning_router.message(TripPlanning.waiting_for_location, F.text)
async def process_location_text(message: Message, state: FSMContext):
    await state.update_data(user_location_text=message.text.strip())
    user_data = await state.get_data()
    print(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ª–æ–∫–∞—Ü–∏–∏: {user_data}")

    await message.answer(
        f"–ü—Ä–∏–Ω—è—Ç–æ! –í—ã —É–∫–∞–∑–∞–ª–∏: {message.text}.\n\n"
        "<b>–®–∞–≥ 2: –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã</b> üé®üèûÔ∏èüèõÔ∏èüõçÔ∏è\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —á—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –ø–æ–µ–∑–¥–∫–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: "
        "<i>–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –ø—Ä–∏—Ä–æ–¥–∞, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, —à–æ–ø–∏–Ω–≥, –∏—Å—Ç–æ—Ä–∏—è, –∏—Å–∫—É—Å—Å—Ç–≤–æ, –Ω–æ—á–Ω–∞—è –∂–∏–∑–Ω—å, —Å–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö</i>."
    )
    await state.set_state(TripPlanning.waiting_for_interests)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_interests.")


# TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (message: ContentType.LOCATION) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_location

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö
@trip_planning_router.message(TripPlanning.waiting_for_interests, F.text)
async def process_interests(message: Message, state: FSMContext):
    await state.update_data(user_interests_text=message.text.strip())
    user_data = await state.get_data()
    print(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {user_data}")

    budget_buttons = [
        [InlineKeyboardButton(text="üí∞ –≠–∫–æ–Ω–æ–º (Low)", callback_data="budget_low")],
        [InlineKeyboardButton(text="üí∞üí∞ –°—Ä–µ–¥–Ω–∏–π (Mid)", callback_data="budget_mid")],
        [InlineKeyboardButton(text="üí∞üí∞üí∞ –ü—Ä–µ–º–∏—É–º (Premium)", callback_data="budget_premium")]
    ]
    budget_keyboard = InlineKeyboardMarkup(inline_keyboard=budget_buttons)

    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {message.text}.\n\n"
        "<b>–®–∞–≥ 3: –í–∞—à –±—é–¥–∂–µ—Ç</b> üí≥\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –ø–æ–µ–∑–¥–∫—É:",
        reply_markup=budget_keyboard
    )
    await state.set_state(TripPlanning.waiting_for_budget)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_budget.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –±—é–¥–∂–µ—Ç–∞
@trip_planning_router.callback_query(TripPlanning.waiting_for_budget, F.data.startswith("budget_"))
async def process_budget_callback(callback_query: CallbackQuery, state: FSMContext):
    selected_budget = callback_query.data.split("_")[1]
    await state.update_data(user_budget=selected_budget)
    user_data_budget = await state.get_data()
    print(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id} –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞: {user_data_budget}")

    await callback_query.message.edit_text(
        f"–ë—é–¥–∂–µ—Ç –≤—ã–±—Ä–∞–Ω: {selected_budget.capitalize()}.\n\n"
        "<b>–®–∞–≥ 4: –î–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏</b> üìÖ\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>2025-05-10 to 2025-05-12</i> –∏–ª–∏ <i>—Å 10 –ø–æ 12 –º–∞—è 2025</i>.\n"
        "–ï—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö –¥–∞—Ç –Ω–µ—Ç, –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, <i>–Ω–µ–¥–µ–ª—è –≤ –∏—é–ª–µ</i> –∏–ª–∏ <i>3 –¥–Ω—è</i>."
    )
    await callback_query.answer(text=f"–ë—é–¥–∂–µ—Ç: {selected_budget.capitalize()}", show_alert=False)
    await state.set_state(TripPlanning.waiting_for_trip_dates)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_trip_dates.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–∞—Ç–∞—Ö –ø–æ–µ–∑–¥–∫–∏
@trip_planning_router.message(TripPlanning.waiting_for_trip_dates, F.text)
async def process_trip_dates(message: Message, state: FSMContext):
    await state.update_data(user_trip_dates_text=message.text.strip())
    user_data_dates = await state.get_data()
    print(f"–î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞—Ç: {user_data_dates}")

    await message.answer(
        f"–î–∞—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã: {message.text}.\n\n"
        "<b>–®–∞–≥ 5: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É</b> üö∂üöóüöåüö≤\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–∞–∫–∏–µ –≤–∏–¥—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø–æ–µ–∑–¥–∫–µ. "
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ø–µ—à–∫–æ–º, –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –≤–µ–ª–æ—Å–∏–ø–µ–¥, —Ç–∞–∫—Å–∏</i>."
    )
    await state.set_state(TripPlanning.waiting_for_transport_prefs)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_transport_prefs.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
@trip_planning_router.message(TripPlanning.waiting_for_transport_prefs, F.text)
async def process_transport_prefs(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(user_transport_prefs_text=message.text.strip())
    final_user_data = await state.get_data()
    print(f"–í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {final_user_data}")

    await message.answer(
        f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –ø—Ä–∏–Ω—è—Ç—ã: {message.text}.\n\n"
        "üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å—é –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!</b>\n"
        "–ü–æ–¥–±–∏—Ä–∞—é –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚ú®"
    )
    await state.clear()

    recommendations_json, accompanying_text = await get_travel_recommendations(final_user_data)

    if recommendations_json and accompanying_text:
        await message.answer(accompanying_text)

        if "recommendations" in recommendations_json:
            for rec in recommendations_json["recommendations"]:
                formatted_text = await _format_recommendation_text(rec)  # –í—ã–∑–æ–≤ –Ω–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏

                buttons = []
                if rec.get('booking_link'):
                    buttons.append(InlineKeyboardButton(text="üîó –ë—Ä–æ–Ω—å/–ë–∏–ª–µ—Ç—ã", url=rec.get('booking_link')))

                coords = rec.get('coordinates')
                if coords and isinstance(coords, list) and len(coords) == 2:
                    lat, lon = coords
                    maps_url = f"https://www.google.com/maps/search/?api=1&query={lat},{lon}"
                    buttons.append(InlineKeyboardButton(text="üó∫Ô∏è –ù–∞ –∫–∞—Ä—Ç–µ", url=maps_url))

                reply_markup = InlineKeyboardMarkup(inline_keyboard=[buttons]) if buttons else None

                images = rec.get("images", [])
                if images:
                    try:
                        await bot.send_photo(
                            chat_id=message.chat.id,
                            photo=images[0],
                            caption=formatted_text,
                            reply_markup=reply_markup,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {images[0]}: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–º.")
                        await message.answer(formatted_text, reply_markup=reply_markup, parse_mode="HTML")
                else:
                    await message.answer(formatted_text, reply_markup=reply_markup, parse_mode="HTML")
        else:
            await message.answer("–í –ø–æ–ª—É—á–µ–Ω–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –æ—Ç AI –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–∞ 'recommendations'.")
    else:
        error_text = accompanying_text or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await message.answer(error_text)

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç AI (–∑–∞–≥–ª—É—à–∫–∏). FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ.")