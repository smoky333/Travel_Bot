from aiogram import Router, F
from aiogram.filters import CommandStart, Command  # –î–æ–±–∞–≤–∏–ª–∏ Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, \
    InlineKeyboardButton  # –î–æ–±–∞–≤–∏–ª–∏ CallbackQuery –∏ –∫–Ω–æ–ø–∫–∏
from aiogram.fsm.context import FSMContext  # –î–æ–±–∞–≤–∏–ª–∏ FSMContext
import logging  # –î–æ–±–∞–≤–∏–ª–∏ logging –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (—É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
# –ï—Å–ª–∏ trip_planning_states.py –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ handlers:
from .trip_planning_states import LanguageSelection

# –ï—Å–ª–∏ —É —Ç–µ–±—è –¥—Ä—É–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ø–æ–ø—Ä–∞–≤—å –∏–º–ø–æ—Ä—Ç. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –æ–±–∞ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ handlers.

user_commands_router = Router(name="user_commands_router")

# –°–õ–û–í–ê–†–¨ –° –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ú–ò –Ø–ó–´–ö–ê–ú–ò –ò –ò–• –ö–û–î–ê–ú–ò
SUPPORTED_LANGUAGES = {
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru",
    "üá¨üáß English": "en",
    "üá´üá∑ Fran√ßais": "fr",
}


# –ö–æ–º–∞–Ω–¥–∞ /start —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@user_commands_router.message(CommandStart())
async def handle_start_command(message: Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    lang_buttons = []
    for lang_name, lang_code in SUPPORTED_LANGUAGES.items():
        lang_buttons.append([InlineKeyboardButton(text=lang_name, callback_data=f"select_lang_{lang_code}")])

    language_keyboard = InlineKeyboardMarkup(inline_keyboard=lang_buttons)

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please select your language / Veuillez s√©lectionner votre langue:",
        reply_markup=language_keyboard
    )
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    await state.set_state(LanguageSelection.waiting_for_language_choice)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –≤—ã–±–æ—Ä —è–∑—ã–∫–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@user_commands_router.callback_query(LanguageSelection.waiting_for_language_choice, F.data.startswith("select_lang_"))
async def process_language_selection(callback_query: CallbackQuery, state: FSMContext):
    selected_lang_code = callback_query.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ (ru, en, fr)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –≤ FSM –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(user_language=selected_lang_code)

    greeting_text = ""
    if selected_lang_code == "ru":
        greeting_text = (
            f"üá∑üá∫ –û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.\n"
            f"–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Travel Bot.\n"
            f"–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–µ –ª—É—á—à–µ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!\n\n"
            f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /plan_trip"
        )
    elif selected_lang_code == "en":
        greeting_text = (
            f"üá¨üáß Great! English language selected.\n"
            f"I am your personal Travel Bot.\n"
            f"Ready to help you plan your best trip!\n\n"
            f"To start planning, use the /plan_trip command."
        )
    elif selected_lang_code == "fr":
        greeting_text = (
            f"üá´üá∑ Parfait ! Langue fran√ßaise s√©lectionn√©e.\n"
            f"Je suis votre Travel Bot personnel.\n"
            f"Pr√™t √† vous aider √† planifier votre meilleur voyage !\n\n"
            f"Pour commencer la planification, utilisez la commande /plan_trip"
        )
    else:
        greeting_text = "Language selected. Use /plan_trip to start."

    await callback_query.message.edit_text(greeting_text)
    await callback_query.answer()

    # –ù–ï –û–ß–ò–©–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï FSM (state.clear()), —á—Ç–æ–±—ã user_language —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –¥–ª—è /plan_trip
    # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, —è–≤–Ω–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ FSM –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞, –Ω–æ –¥–∞–Ω–Ω—ã–µ –≤ state –æ—Å—Ç–∞—é—Ç—Å—è
    await state.set_state(None)

    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: {selected_lang_code}. –î–∞–Ω–Ω—ã–µ state: {await state.get_data()}")


# –ö–æ–º–∞–Ω–¥–∞ /language –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —Ä–∞–Ω–µ–µ –∏–ª–∏ —Ö–æ—á–µ—Ç —Å–º–µ–Ω–∏—Ç—å)
@user_commands_router.message(Command("language"))
async def cmd_change_language(message: Message, state: FSMContext):
    # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞, –∫–∞–∫ –ø—Ä–∏ /start
    await handle_start_command(message, state)